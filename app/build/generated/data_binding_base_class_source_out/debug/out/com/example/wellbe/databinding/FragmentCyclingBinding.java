// Generated by view binder compiler. Do not edit!
package com.example.wellbe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Chronometer;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.wellbe.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCyclingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnCyclingHistory;

  @NonNull
  public final Button btnPause;

  @NonNull
  public final Button btnStart;

  @NonNull
  public final Button btnStop;

  @NonNull
  public final Chronometer chronometer;

  @NonNull
  public final TextView txtCalories;

  @NonNull
  public final TextView txtDistance;

  @NonNull
  public final TextView txtSteps;

  private FragmentCyclingBinding(@NonNull LinearLayout rootView, @NonNull Button btnCyclingHistory,
      @NonNull Button btnPause, @NonNull Button btnStart, @NonNull Button btnStop,
      @NonNull Chronometer chronometer, @NonNull TextView txtCalories,
      @NonNull TextView txtDistance, @NonNull TextView txtSteps) {
    this.rootView = rootView;
    this.btnCyclingHistory = btnCyclingHistory;
    this.btnPause = btnPause;
    this.btnStart = btnStart;
    this.btnStop = btnStop;
    this.chronometer = chronometer;
    this.txtCalories = txtCalories;
    this.txtDistance = txtDistance;
    this.txtSteps = txtSteps;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCyclingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCyclingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_cycling, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCyclingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCyclingHistory;
      Button btnCyclingHistory = ViewBindings.findChildViewById(rootView, id);
      if (btnCyclingHistory == null) {
        break missingId;
      }

      id = R.id.btnPause;
      Button btnPause = ViewBindings.findChildViewById(rootView, id);
      if (btnPause == null) {
        break missingId;
      }

      id = R.id.btnStart;
      Button btnStart = ViewBindings.findChildViewById(rootView, id);
      if (btnStart == null) {
        break missingId;
      }

      id = R.id.btnStop;
      Button btnStop = ViewBindings.findChildViewById(rootView, id);
      if (btnStop == null) {
        break missingId;
      }

      id = R.id.chronometer;
      Chronometer chronometer = ViewBindings.findChildViewById(rootView, id);
      if (chronometer == null) {
        break missingId;
      }

      id = R.id.txtCalories;
      TextView txtCalories = ViewBindings.findChildViewById(rootView, id);
      if (txtCalories == null) {
        break missingId;
      }

      id = R.id.txtDistance;
      TextView txtDistance = ViewBindings.findChildViewById(rootView, id);
      if (txtDistance == null) {
        break missingId;
      }

      id = R.id.txtSteps;
      TextView txtSteps = ViewBindings.findChildViewById(rootView, id);
      if (txtSteps == null) {
        break missingId;
      }

      return new FragmentCyclingBinding((LinearLayout) rootView, btnCyclingHistory, btnPause,
          btnStart, btnStop, chronometer, txtCalories, txtDistance, txtSteps);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
